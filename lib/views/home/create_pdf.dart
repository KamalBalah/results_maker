import 'dart:io';
import 'package:excel/excel.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart';
import 'package:results_maker/services/settings_service.dart';
import '../../utils/languages/app_strings.dart';

class CreatePDF {
  final PageOrientation orientation;
  final List<List<Data?>> listData;
  late final TextDirection textDirection;

  CreatePDF({required this.listData, required this.orientation}) {
    textDirection = Get.find<SettingsService>().getLocale().languageCode == "ar"
        ? TextDirection.rtl
        : TextDirection.ltr;
  }

  getPdfStyleTheme() async {
    String font = "assets/fonts/HacenTunisia.ttf";
    return ThemeData.withFont(
      base: Font.ttf(await rootBundle.load(font)),
      bold: Font.ttf(await rootBundle.load(font)),
      italic: Font.ttf(await rootBundle.load(font)),
      boldItalic: Font.ttf(await rootBundle.load(font)),
    );
  }

  Future<void> createPDF() async {
    final Document pdf = Document();

    int itemPerPage = orientation == PageOrientation.portrait ? 5 : 4;
    Directory d = await getApplicationDocumentsDirectory();
    String filePath = "${d.path}\\share.pdf";

    List<Widget> pages = [];

    if (listData.length > itemPerPage) {
      int numberOfLoop =
          int.parse((listData.length / itemPerPage).ceil().toString());

      int loopPosition = 0;

      int lastIndex = 1;
      while (loopPosition < numberOfLoop) {
        pages.add(page(
            lastIndex,
            (lastIndex + itemPerPage) < listData.length
                ? (lastIndex + itemPerPage)
                : listData.length));
        loopPosition++;
        lastIndex = lastIndex + itemPerPage;
      }
    } else {
      pages.add(page(1, listData.length));
    }
    ThemeData themeData = await getPdfStyleTheme();
    pdf.addPage(MultiPage(
      textDirection: textDirection,
      theme: themeData,
      orientation: orientation,
      pageFormat: PdfPageFormat.a4,
      margin: const EdgeInsets.symmetric(horizontal: 10),
      build: (context) {
        return pages;
      },
    ));

    final file = File(filePath);
    await file.writeAsBytes(await pdf.save());
  }

  Widget page(int start, int end) {
    return Column(
      children: listData
          .sublist(start, end)
          .map(
            (e) => getSingleRowItem(e),
          )
          .toList(),
    );
  }

  Widget getSingleRowItem(List<Data?> list) {
    return Column(children: [
      // getTitleWidget(),
      getHeadersTableWidget(list),
      getResultsTableWidget(list),
      SizedBox(
        width: double.infinity,
        child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              SizedBox(height: 2),
              Text(
                "generated by Result Maker contact at www.kamalbalah.com",
                style: TextStyle(
                  fontStyle: FontStyle.italic,
                  fontSize: 9.5,
                ),
              ),
            ]),
      )
    ]);
  }

  Row getTitleWidget() {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.center,
      mainAxisSize: MainAxisSize.max,
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      verticalDirection: VerticalDirection.up,
      children: [
        Column(children: [
          Text("جامعه الحديده"),
          Text("كلية طب الاسنان"),
          Text("شؤون الطلاب"),
        ]),
      ],
    );
  }

  Table getHeadersTableWidget(List<Data?> list) {
    return Table(
      border: TableBorder.all(width: 2),
      columnWidths: {
        2: const FlexColumnWidth(.2),
        1: const FlexColumnWidth(.6),
        0: const FlexColumnWidth(.2),
      },
      children: [
        TableRow(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                Text(
                  AppStrings.studentNumber.tr,
                  textDirection: textDirection,
                ),
                Text(
                  list[1]?.value.toString() ?? "NULL",
                  textDirection: textDirection,
                ),
              ].supportArabic(),
            ),
            Row(
                mainAxisAlignment: MainAxisAlignment.end,
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text(
                    AppStrings.studentName.tr,
                    textDirection: textDirection,
                  ),
                  Text(
                    list[0]?.value.toString() ?? "NULL",
                    textDirection: textDirection,
                  ),
                ].supportArabic()),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                Text(AppStrings.studentStatus.tr),
                Text(
                  double.parse(list[list.length - 2]?.value.toString() ?? "0") >
                          50
                      ? AppStrings.successful.tr
                      : AppStrings.failure.tr,
                ),
              ].supportArabic(),
            ),
          ].supportArabic(),
        ),
      ],
    );
  }

  Table getResultsTableWidget(List<Data?> list) {
    return Table(
      border: TableBorder.all(width: 2),
      defaultVerticalAlignment: TableCellVerticalAlignment.full,
      children: [
        TableRow(
          children: [
            SizedBox(
                height: 37,
                child: Center(
                    child: Text(
                  AppStrings.subjectName.tr,
                  textDirection: textDirection,
                  textAlign: TextAlign.center,
                ))),
            ...listData[0]
                .sublist(2, list.length)
                .map((e) => SizedBox(
                    height: 37,
                    child: Padding(
                      padding: const EdgeInsets.symmetric(
                        vertical: 2,
                      ),
                      child: Center(
                          child: Text(e?.value.toString() ?? "NULL",
                              style: TextStyle(
                                  fontSize:
                                      orientation == PageOrientation.portrait
                                          ? list.length - 4 >= 10
                                              ? 9.5
                                              : 12
                                          : list.length - 4 >= 14
                                              ? 9.5
                                              : 12),
                              textDirection: textDirection,
                              textAlign: TextAlign.center)),
                    )))
                .toList(),
          ].supportArabic(),
        ),
        TableRow(
            children: [
          Text(
            AppStrings.grade.tr,
            textDirection: textDirection,
            textAlign: TextAlign.center,
          ),
          ...list
              .sublist(2, list.length)
              .map((e) => Text(e?.value.toString() ?? "NULL",
                  textDirection: textDirection, textAlign: TextAlign.center))
              .toList(),
        ].supportArabic()),
      ],
    );
  }
}

extension SupportArabic on List<Widget> {
  List<Widget> supportArabic() {
    bool isArabic =
        Get.find<SettingsService>().getLocale().languageCode == "ar";
    return isArabic ? reversed.toList() : this;
  }
}
